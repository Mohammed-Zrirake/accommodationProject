// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250617191351_HostelUpdate")]
    partial class HostelUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("api.Models.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Photos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rules")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Accommodations");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("api.Models.Amenity", b =>
                {
                    b.Property<Guid>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccommodationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DormId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HostelId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("TEXT");

                    b.HasKey("AmenityId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("DormId");

                    b.HasIndex("HostelId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("api.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccommodationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DormId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("BookingId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("DormId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", t =>
                        {
                            t.HasCheckConstraint("CK_Booking_ExclusiveArc", "(\r\n            (CASE WHEN [AccommodationId] IS NOT NULL THEN 1 ELSE 0 END) +\r\n            (CASE WHEN [RoomId] IS NOT NULL THEN 1 ELSE 0 END) +\r\n            (CASE WHEN [DormId] IS NOT NULL THEN 1 ELSE 0 END)\r\n        ) = 1");
                        });
                });

            modelBuilder.Entity("api.Models.Card", b =>
                {
                    b.Property<Guid>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumberHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExpiryMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpiryYear")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("api.Models.Dorm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HostelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Photos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rules")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.ToTable("Dorms");
                });

            modelBuilder.Entity("api.Models.Hostel", b =>
                {
                    b.Property<Guid>("HostelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Photos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StarRating")
                        .HasColumnType("INTEGER");

                    b.HasKey("HostelId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Hostels");
                });

            modelBuilder.Entity("api.Models.Hotel", b =>
                {
                    b.Property<Guid>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Photos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StarRating")
                        .HasColumnType("INTEGER");

                    b.HasKey("HotelId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("api.Models.Like", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LikeId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("UserId", "AccommodationId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("api.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("CardId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccommodationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentText")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DormId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerifiedStay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ReviewId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("DormId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api.Models.Riad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasCourtyard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Photos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TraditionalDecor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Riads");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("api.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HostelId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Photos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RiadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rules")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RiadId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("api.Models.Wishlist", b =>
                {
                    b.Property<Guid>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("WishlistId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("api.Models.WishlistItem", b =>
                {
                    b.Property<Guid>("WishlistItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccommodationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DormId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("TEXT");

                    b.HasKey("WishlistItemId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("DormId");

                    b.HasIndex("RoomId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems", t =>
                        {
                            t.HasCheckConstraint("CK_WishlistItem_ExclusiveArc", "(\r\n            (CASE WHEN [AccommodationId] IS NOT NULL THEN 1 ELSE 0 END) +\r\n            (CASE WHEN [RoomId] IS NOT NULL THEN 1 ELSE 0 END) +\r\n            (CASE WHEN [DormId] IS NOT NULL THEN 1 ELSE 0 END)\r\n        ) = 1");
                        });
                });

            modelBuilder.Entity("api.Models.Appartement", b =>
                {
                    b.HasBaseType("api.Models.Accommodation");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfBedrooms")
                        .HasColumnType("INTEGER");

                    b.ToTable("Appartements");
                });

            modelBuilder.Entity("api.Models.Cottage", b =>
                {
                    b.HasBaseType("api.Models.Accommodation");

                    b.Property<bool>("HasFireplace")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDetached")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfBedrooms")
                        .HasColumnType("INTEGER");

                    b.ToTable("Cottages");
                });

            modelBuilder.Entity("api.Models.Villa", b =>
                {
                    b.HasBaseType("api.Models.Accommodation");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfBedrooms")
                        .HasColumnType("INTEGER");

                    b.ToTable("Villas");
                });

            modelBuilder.Entity("api.Models.Accommodation", b =>
                {
                    b.HasOne("api.Models.User", "Provider")
                        .WithMany("ManagedAccommodations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("api.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("AccommodationId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT");

                            b1.Property<string>("StateOrProvince")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.HasKey("AccommodationId");

                            b1.ToTable("Accommodations");

                            b1.WithOwner()
                                .HasForeignKey("AccommodationId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("api.Models.Amenity", b =>
                {
                    b.HasOne("api.Models.Accommodation", null)
                        .WithMany("Amenities")
                        .HasForeignKey("AccommodationId");

                    b.HasOne("api.Models.Dorm", null)
                        .WithMany("Amenities")
                        .HasForeignKey("DormId");

                    b.HasOne("api.Models.Hostel", null)
                        .WithMany("HostelAmenities")
                        .HasForeignKey("HostelId");

                    b.HasOne("api.Models.Hotel", null)
                        .WithMany("HotelAmenities")
                        .HasForeignKey("HotelId");

                    b.HasOne("api.Models.Room", null)
                        .WithMany("Amenities")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("api.Models.Booking", b =>
                {
                    b.HasOne("api.Models.Accommodation", "Accommodation")
                        .WithMany("Bookings")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Models.Dorm", "Dorm")
                        .WithMany("Bookings")
                        .HasForeignKey("DormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Dorm");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Card", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.HasOne("api.Models.Accommodation", "Accommodation")
                        .WithMany("Comments")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "Author")
                        .WithMany("CommentsPosted")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("api.Models.Dorm", b =>
                {
                    b.HasOne("api.Models.Hostel", "Hostel")
                        .WithMany("Dorms")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hostel");
                });

            modelBuilder.Entity("api.Models.Hostel", b =>
                {
                    b.HasOne("api.Models.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("HostelId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT");

                            b1.Property<string>("StateOrProvince")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.HasKey("HostelId");

                            b1.ToTable("Hostels");

                            b1.WithOwner()
                                .HasForeignKey("HostelId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("api.Models.Hotel", b =>
                {
                    b.HasOne("api.Models.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("HotelId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT");

                            b1.Property<string>("StateOrProvince")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.HasKey("HotelId");

                            b1.ToTable("Hotels");

                            b1.WithOwner()
                                .HasForeignKey("HotelId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("api.Models.Like", b =>
                {
                    b.HasOne("api.Models.Accommodation", "Accommodation")
                        .WithMany("Likes")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany("LikesGiven")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Payment", b =>
                {
                    b.HasOne("api.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("api.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Card", "Card")
                        .WithMany("Payments")
                        .HasForeignKey("CardId");

                    b.Navigation("Booking");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.HasOne("api.Models.Accommodation", null)
                        .WithMany("Reviews")
                        .HasForeignKey("AccommodationId");

                    b.HasOne("api.Models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("api.Models.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Dorm", null)
                        .WithMany("Reviews")
                        .HasForeignKey("DormId");

                    b.HasOne("api.Models.Room", null)
                        .WithMany("Reviews")
                        .HasForeignKey("RoomId");

                    b.HasOne("api.Models.User", null)
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("UserId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("api.Models.Riad", b =>
                {
                    b.HasOne("api.Models.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("api.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RiadId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT");

                            b1.Property<string>("StateOrProvince")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.HasKey("RiadId");

                            b1.ToTable("Riads");

                            b1.WithOwner()
                                .HasForeignKey("RiadId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("api.Models.Room", b =>
                {
                    b.HasOne("api.Models.Hostel", "Hostel")
                        .WithMany("PrivateRooms")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.Riad", "Riad")
                        .WithMany("Rooms")
                        .HasForeignKey("RiadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Hostel");

                    b.Navigation("Hotel");

                    b.Navigation("Riad");
                });

            modelBuilder.Entity("api.Models.UserRole", b =>
                {
                    b.HasOne("api.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Wishlist", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("api.Models.Wishlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.WishlistItem", b =>
                {
                    b.HasOne("api.Models.Accommodation", "Accommodation")
                        .WithMany("WishlistItems")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Models.Dorm", "Dorm")
                        .WithMany("WishlistItems")
                        .HasForeignKey("DormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Models.Room", "Room")
                        .WithMany("WishlistItems")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Models.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Dorm");

                    b.Navigation("Room");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("api.Models.Appartement", b =>
                {
                    b.HasOne("api.Models.Accommodation", null)
                        .WithOne()
                        .HasForeignKey("api.Models.Appartement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Cottage", b =>
                {
                    b.HasOne("api.Models.Accommodation", null)
                        .WithOne()
                        .HasForeignKey("api.Models.Cottage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Villa", b =>
                {
                    b.HasOne("api.Models.Accommodation", null)
                        .WithOne()
                        .HasForeignKey("api.Models.Villa", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Accommodation", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Bookings");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("api.Models.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("api.Models.Card", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("api.Models.Dorm", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("api.Models.Hostel", b =>
                {
                    b.Navigation("Dorms");

                    b.Navigation("HostelAmenities");

                    b.Navigation("PrivateRooms");
                });

            modelBuilder.Entity("api.Models.Hotel", b =>
                {
                    b.Navigation("HotelAmenities");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("api.Models.Riad", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("api.Models.Room", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Cards");

                    b.Navigation("CommentsPosted");

                    b.Navigation("LikesGiven");

                    b.Navigation("ManagedAccommodations");

                    b.Navigation("ReviewsWritten");

                    b.Navigation("UserRoles");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("api.Models.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
